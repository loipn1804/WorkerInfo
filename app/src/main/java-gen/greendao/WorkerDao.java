package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Worker;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WORKER.
*/
public class WorkerDao extends AbstractDao<Worker, Long> {

    public static final String TABLENAME = "WORKER";

    /**
     * Properties of entity Worker.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Block = new Property(1, String.class, "block", false, "BLOCK");
        public final static Property Level = new Property(2, String.class, "level", false, "LEVEL");
        public final static Property Unit = new Property(3, String.class, "unit", false, "UNIT");
        public final static Property FaceImage = new Property(4, String.class, "faceImage", false, "FACE_IMAGE");
        public final static Property CardFrontImage = new Property(5, String.class, "cardFrontImage", false, "CARD_FRONT_IMAGE");
        public final static Property CardBackImage = new Property(6, String.class, "cardBackImage", false, "CARD_BACK_IMAGE");
        public final static Property Uploaded = new Property(7, Integer.class, "uploaded", false, "UPLOADED");
    };


    public WorkerDao(DaoConfig config) {
        super(config);
    }
    
    public WorkerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WORKER' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'BLOCK' TEXT," + // 1: block
                "'LEVEL' TEXT," + // 2: level
                "'UNIT' TEXT," + // 3: unit
                "'FACE_IMAGE' TEXT," + // 4: faceImage
                "'CARD_FRONT_IMAGE' TEXT," + // 5: cardFrontImage
                "'CARD_BACK_IMAGE' TEXT," + // 6: cardBackImage
                "'UPLOADED' INTEGER);"); // 7: uploaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WORKER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Worker entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String block = entity.getBlock();
        if (block != null) {
            stmt.bindString(2, block);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(3, level);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(4, unit);
        }
 
        String faceImage = entity.getFaceImage();
        if (faceImage != null) {
            stmt.bindString(5, faceImage);
        }
 
        String cardFrontImage = entity.getCardFrontImage();
        if (cardFrontImage != null) {
            stmt.bindString(6, cardFrontImage);
        }
 
        String cardBackImage = entity.getCardBackImage();
        if (cardBackImage != null) {
            stmt.bindString(7, cardBackImage);
        }
 
        Integer uploaded = entity.getUploaded();
        if (uploaded != null) {
            stmt.bindLong(8, uploaded);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Worker readEntity(Cursor cursor, int offset) {
        Worker entity = new Worker( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // block
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // level
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // unit
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // faceImage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cardFrontImage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cardBackImage
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // uploaded
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Worker entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBlock(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLevel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUnit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFaceImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCardFrontImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCardBackImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUploaded(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Worker entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Worker entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
